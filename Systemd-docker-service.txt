sudo systemctl daemon-reload
sudo systemctl restart docker-start.service
sudo systemctl start docker-start.service
sudo systemctl status docker-start.service
sudo journalctl -xeu docker-start.service

========================CurrentFile====================================

[Unit]
Description=Start Docker containers and run scripts
After=network.target docker.service
Requires=docker.service

[Service]
Type=oneshot
RemainAfterExit=true

# Start the containers
ExecStartPre=/usr/bin/docker start Jar-common1
ExecStartPre=/usr/bin/docker start ga-jar
ExecStartPre=/usr/bin/docker start fe-con2

# Ensure the containers are running and then execute the scripts
ExecStart=/bin/bash -c 'until [ "$(/usr/bin/docker inspect -f {{.State.Running}} Jar-common1)" == "true" ]; do sleep 5; done; /usr/bin/docker exec Jar-common1 /bin/bash /commonjar_files1/run-app.sh'
ExecStartPost=/bin/bash -c 'until [ "$(/usr/bin/docker inspect -f {{.State.Running}} ga-jar)" == "true" ]; do sleep 5; done; /usr/bin/docker exec ga-jar /bin/bash /jar_files1/ubuntu/run-app.sh'
ExecStartPost=/bin/bash -c 'until [ "$(/usr/bin/docker inspect -f {{.State.Running}} fe-con2)" == "true" ]; do sleep 5; done; /usr/bin/docker exec fe-con2 /bin/bash /dockertest4/ubuntu/fe-app/pm2-status.sh'

[Install]
WantedBy=multi-user.target

==============================ModifiedFile=================================

[Unit]
Description=Start Docker containers and run scripts
After=network.target docker.service
Requires=docker.service

[Service]
Type=oneshot
RemainAfterExit=true

# Start the containers (skip if they fail)
ExecStartPre=/bin/bash -c 'if /usr/bin/docker inspect Jar-common1 >/dev/null 2>&1; then /usr/bin/docker start Jar-common1; fi'
ExecStartPre=/bin/bash -c 'if /usr/bin/docker inspect ga-jar >/dev/null 2>&1; then /usr/bin/docker start ga-jar; fi'
ExecStartPre=/bin/bash -c 'if /usr/bin/docker inspect fe-con2 >/dev/null 2>&1; then /usr/bin/docker start fe-con2; fi'

# Ensure the containers are running and then execute the scripts
ExecStart=/bin/bash -c 'if [ "$(/usr/bin/docker inspect -f {{.State.Running}} Jar-common1)" == "true" ]; then /usr/bin/docker exec Jar-common1 /bin/bash /commonjar_files1/run-app.sh; fi'
ExecStartPost=/bin/bash -c 'if [ "$(/usr/bin/docker inspect -f {{.State.Running}} ga-jar)" == "true" ]; then /usr/bin/docker exec ga-jar /bin/bash /jar_files1/ubuntu/run-app.sh; fi'
ExecStartPost=/bin/bash -c 'if [ "$(/usr/bin/docker inspect -f {{.State.Running}} fe-con2)" == "true" ]; then /usr/bin/docker exec fe-con2 /bin/bash /dockertest4/ubuntu/fe-app/pm2-status.sh; fi'

[Install]
WantedBy=multi-user.target



=========================================================CurrentFileThatWorking=======================================================

[Unit]
Description=Start Docker containers and run scripts
After=network.target docker.service
Requires=docker.service

[Service]
Type=oneshot
RemainAfterExit=true

# Start the containers
ExecStartPre=/usr/bin/docker start CommonJar-con5
ExecStartPre=/usr/bin/docker start jar-con3
ExecStartPre=/usr/bin/docker start fe-con2

# Ensure the containers are running and then execute the scripts
ExecStart=/bin/bash -c 'until [ "$(/usr/bin/docker inspect -f {{.State.Running}} CommonJar-con5)" == "true" ]; do sleep 5; done; /usr/bin/docker exec CommonJar-con5 /bin/bash /home/ubuntu/run-app.sh'
ExecStartPost=/bin/bash -c 'until [ "$(/usr/bin/docker inspect -f {{.State.Running}} jar-con3)" == "true" ]; do sleep 5; done; /usr/bin/docker exec jar-con3 /bin/bash /jar_files1/ubuntu/run-app.sh'
ExecStartPost=/bin/bash -c 'until [ "$(/usr/bin/docker inspect -f {{.State.Running}} fe-con2)" == "true" ]; do sleep 5; done; /usr/bin/docker exec fe-con2 /bin/bash /dockertest4/ubuntu/fe-app/pm2-status.sh'

[Install]
WantedBy=multi-user.target



ga-jar ==> /jar_files1/ubuntu/run-app.sh

Jar-common1 ==> /commonjar_files1/run-app.sh



